package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/toxyl/flo"
	"github.com/toxyl/gfx/config"
	"github.com/toxyl/gfx/fs"
	"github.com/toxyl/gfx/utils/buildlog"
)

func createBlankImports(pkgName string) []string {
	imports := []string{}
	modulePath := config.PATH_CORE_MODULE_IMPORT + "/" + pkgName
	srcDir := config.PATH_CORE_MODULE + "/" + pkgName
	srcDir, _ = filepath.Abs(srcDir)
	flo.Dir(srcDir).Each(func(f *flo.FileObj) {
		if strings.HasSuffix(f.Parent().Path(), "/"+pkgName) {
			return // only process sub directories
		}
		if strings.HasSuffix(f.Name(), ".go") {
			rel, err := filepath.Rel(srcDir, f.Path())
			if err != nil {
				return
			}
			imports = append(imports, filepath.Dir(modulePath+"/"+filepath.ToSlash(rel)))
		}
	}, nil)
	return imports
}

func main() {
	buildlog.Log("Building imports",
		func() {
			imports := []string{}
			imports = append(imports, createBlankImports("functions")...)
			imports = append(imports, createBlankImports("blendmodes")...)
			imports = append(imports, createBlankImports("colormodels")...)
			imports = append(imports, createBlankImports("projections")...)

			outputFile := config.PATH_CORE_MODULE + "/imports.go"
			sb := strings.Builder{}
			sb.WriteString("// Code generated by go:generate; DO NOT EDIT.\n")
			sb.WriteString("package core\n\n")
			sb.WriteString("import (\n")
			for _, imp := range imports {
				sb.WriteString("\t_ ")
				sb.WriteString(`"` + imp + `"`)
				sb.WriteString("\n")
			}
			sb.WriteString(")\n")

			if err := fs.SaveString(outputFile, sb.String()); err != nil {
				fmt.Fprintf(os.Stderr, "Error creating imports: %v\n", err)
				os.Exit(1)
			}
		},
	)

}
