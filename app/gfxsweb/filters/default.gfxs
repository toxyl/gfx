[VARS]
vibrance = 0.1

[FILTERS]
# alpha-map(source=l lower=0 upper=0)
# blur(amount=1)
# brightness(adjustment=1)
# color-shift(hue=0 sat=0 lum=0)
# contrast(adjustment=1)
# convolution(amount=1 bias=0 factor=1 matrix=[[1 1 1] [1 8 1] [1 1 1]])
# crop(left=0 right=0 top=0 bottom=0) # 0..1 (0% to 100%), measured from the respective edge, e.g. `crop(0.1 0.1)` crops 10% from the left and 10% from the right
# crop-circle(radius=0 offset-x=0 offset-y=0) # 0..1 (0% to 100%), measured from the center, e.g. `crop-circle(0.5)` crops a circle with a diameter matching the maximum dimension (width or height)
# edge-detect(amount=1)
# emboss(amount=1)
# enhance(amount=1)
# extract(hue=0 hue-tolerance=180 hue-feather=0 sat=0.5 sat-tolerance=0.5 sat-feather=0 lum=0.5 lum-tolerance=0.5 lum-feather=0)
# flip-h()
# flip-v()
# gamma(adjustment=1)
# gray()
# hue-contrast(adjustment=0)
# hue(shift=0)
# invert()
# lum-contrast(adjustment=0)
# lum(shift=0)
# pastelize()
# rotate(angle=0 offset-x=0 offset-y=0) # angle: degrees; offsets: -1..1 (-100% to +100%), measured from the center, e.g. `rotate(180 -1 -1)` = 180 degrees around upper left corner
# sat-contrast(adjustment=0)
# sat(shift=0)
# scale(scale=0 offset-x=0 offset-y=0) # scale: -1..n; offsets: -1..1 (-100% to 100%), measured from the image center, e.g. `scale(0.5 0 0)` scales the image to 50% of its size around the center
# sepia()
# sharpen(amount=0)
# threshold(amount=0)
# to-polar(angle-start=0 angle-end=360 rotation=0 fisheye=0) # Converts a rectangular image to a polar coordinate representation with the specified angular range. Rotation can be used to align the range. 
# transform(transform-x=0 transform-y=0 rotate=0 scale=0 offset-x=0 offset-y=0) # transform: -1..1 (-100% to 100%); rotate: degrees (-360..360); scale: -1..n (0 = no change, 0.5 = 50% up, -0.5 = 50% down); offsets: -1..1 (-100% to 100%), measured from the image center, define the center for all transformations
# translate(x=0 y=0) # x and y: -1..1 (-100% to 100%), translates the image without wrap-around
# translate-wrap(x=0 y=0) # x and y: -1..1 (-100% to 100%), translates the image with wrap-around enabled
# vibrance(adjustment=0)

compFilter {
  vibrance(vibrance)
}


[COMPOSITION]
filter = compFilter


[LAYERS]
# normal
# ------------
# darken
# multiply
# color-burn
# linear-burn
# ------------
# lighten
# screen
# add
# ------------
# overlay
# soft-light
# hard-light
# pin-light
# ------------
# difference
# exclusion
# subtract
# divide
# ------------
# average
# negation
# ------------
# erase
normal      1.0000       * $IMG
